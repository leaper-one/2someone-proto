// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: 2someone/user/v1/user.proto

package user

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for UserService service

func NewUserServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for UserService service

type UserService interface {
	// 通过手机号注册，需要验证码
	SignUpByPhone(ctx context.Context, in *SignUpByPhoneRequest, opts ...client.CallOption) (*SignUpByPhoneResponse, error)
	// 通过手机号登录
	SignInByPhone(ctx context.Context, in *SignInByPhoneRequest, opts ...client.CallOption) (*SignInByPhoneResponse, error)
	// Get current user infomation by metadata with auth token
	// jwt needed in metadata
	GetMe(ctx context.Context, in *GetMeRequest, opts ...client.CallOption) (*GetMeResponse, error)
	// jwt needed in metadata
	SetInfo(ctx context.Context, in *SetInfoRequest, opts ...client.CallOption) (*SetInfoResponse, error)
	// 根据 buid 获取 user_id
	GetUserIDByBuid(ctx context.Context, in *GetUserIDByBuidRequest, opts ...client.CallOption) (*GetUserIDByBuidResponse, error)
}

type userService struct {
	c    client.Client
	name string
}

func NewUserService(name string, c client.Client) UserService {
	return &userService{
		c:    c,
		name: name,
	}
}

func (c *userService) SignUpByPhone(ctx context.Context, in *SignUpByPhoneRequest, opts ...client.CallOption) (*SignUpByPhoneResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.SignUpByPhone", in)
	out := new(SignUpByPhoneResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) SignInByPhone(ctx context.Context, in *SignInByPhoneRequest, opts ...client.CallOption) (*SignInByPhoneResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.SignInByPhone", in)
	out := new(SignInByPhoneResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) GetMe(ctx context.Context, in *GetMeRequest, opts ...client.CallOption) (*GetMeResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.GetMe", in)
	out := new(GetMeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) SetInfo(ctx context.Context, in *SetInfoRequest, opts ...client.CallOption) (*SetInfoResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.SetInfo", in)
	out := new(SetInfoResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) GetUserIDByBuid(ctx context.Context, in *GetUserIDByBuidRequest, opts ...client.CallOption) (*GetUserIDByBuidResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.GetUserIDByBuid", in)
	out := new(GetUserIDByBuidResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserService service

type UserServiceHandler interface {
	// 通过手机号注册，需要验证码
	SignUpByPhone(context.Context, *SignUpByPhoneRequest, *SignUpByPhoneResponse) error
	// 通过手机号登录
	SignInByPhone(context.Context, *SignInByPhoneRequest, *SignInByPhoneResponse) error
	// Get current user infomation by metadata with auth token
	// jwt needed in metadata
	GetMe(context.Context, *GetMeRequest, *GetMeResponse) error
	// jwt needed in metadata
	SetInfo(context.Context, *SetInfoRequest, *SetInfoResponse) error
	// 根据 buid 获取 user_id
	GetUserIDByBuid(context.Context, *GetUserIDByBuidRequest, *GetUserIDByBuidResponse) error
}

func RegisterUserServiceHandler(s server.Server, hdlr UserServiceHandler, opts ...server.HandlerOption) error {
	type userService interface {
		SignUpByPhone(ctx context.Context, in *SignUpByPhoneRequest, out *SignUpByPhoneResponse) error
		SignInByPhone(ctx context.Context, in *SignInByPhoneRequest, out *SignInByPhoneResponse) error
		GetMe(ctx context.Context, in *GetMeRequest, out *GetMeResponse) error
		SetInfo(ctx context.Context, in *SetInfoRequest, out *SetInfoResponse) error
		GetUserIDByBuid(ctx context.Context, in *GetUserIDByBuidRequest, out *GetUserIDByBuidResponse) error
	}
	type UserService struct {
		userService
	}
	h := &userServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&UserService{h}, opts...))
}

type userServiceHandler struct {
	UserServiceHandler
}

func (h *userServiceHandler) SignUpByPhone(ctx context.Context, in *SignUpByPhoneRequest, out *SignUpByPhoneResponse) error {
	return h.UserServiceHandler.SignUpByPhone(ctx, in, out)
}

func (h *userServiceHandler) SignInByPhone(ctx context.Context, in *SignInByPhoneRequest, out *SignInByPhoneResponse) error {
	return h.UserServiceHandler.SignInByPhone(ctx, in, out)
}

func (h *userServiceHandler) GetMe(ctx context.Context, in *GetMeRequest, out *GetMeResponse) error {
	return h.UserServiceHandler.GetMe(ctx, in, out)
}

func (h *userServiceHandler) SetInfo(ctx context.Context, in *SetInfoRequest, out *SetInfoResponse) error {
	return h.UserServiceHandler.SetInfo(ctx, in, out)
}

func (h *userServiceHandler) GetUserIDByBuid(ctx context.Context, in *GetUserIDByBuidRequest, out *GetUserIDByBuidResponse) error {
	return h.UserServiceHandler.GetUserIDByBuid(ctx, in, out)
}
