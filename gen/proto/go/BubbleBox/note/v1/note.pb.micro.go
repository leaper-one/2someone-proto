// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: bubblebox/note/v1/note.proto

package note

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for NoteService service

func NewNoteServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for NoteService service

type NoteService interface {
	//
	// 根据 filter 访问投稿
	// jwt needed in metadata
	GetNotes(ctx context.Context, in *GetNotesRequest, opts ...client.CallOption) (*GetNotesResponse, error)
	//
	// 创建投稿
	// jwt needed in metadata
	CreateNote(ctx context.Context, in *CreateNoteRequest, opts ...client.CallOption) (*CreateNoteResponse, error)
	//
	// 更新投稿
	// jwt needed in metadata
	UpdateNote(ctx context.Context, in *UpdateNoteRequest, opts ...client.CallOption) (*UpdateNoteResponse, error)
	//
	// 删除投稿
	// jwt needed in metadata
	DeleteNote(ctx context.Context, in *DeleteNoteRequest, opts ...client.CallOption) (*DeleteNoteResponse, error)
	//
	// 改变投稿已读状态
	// jwt needed in metadata
	ChangeNoteReadStatus(ctx context.Context, in *ChangeNoteReadStatusRequest, opts ...client.CallOption) (*ChangeNoteReadStatusResponse, error)
	//
	// 改变投稿归档状态
	// jwt needed in metadata
	ChangeNoteArchiveStatus(ctx context.Context, in *ChangeNoteArchiveStatusRequest, opts ...client.CallOption) (*ChangeNoteArchiveStatusResponse, error)
}

type noteService struct {
	c    client.Client
	name string
}

func NewNoteService(name string, c client.Client) NoteService {
	return &noteService{
		c:    c,
		name: name,
	}
}

func (c *noteService) GetNotes(ctx context.Context, in *GetNotesRequest, opts ...client.CallOption) (*GetNotesResponse, error) {
	req := c.c.NewRequest(c.name, "NoteService.GetNotes", in)
	out := new(GetNotesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noteService) CreateNote(ctx context.Context, in *CreateNoteRequest, opts ...client.CallOption) (*CreateNoteResponse, error) {
	req := c.c.NewRequest(c.name, "NoteService.CreateNote", in)
	out := new(CreateNoteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noteService) UpdateNote(ctx context.Context, in *UpdateNoteRequest, opts ...client.CallOption) (*UpdateNoteResponse, error) {
	req := c.c.NewRequest(c.name, "NoteService.UpdateNote", in)
	out := new(UpdateNoteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noteService) DeleteNote(ctx context.Context, in *DeleteNoteRequest, opts ...client.CallOption) (*DeleteNoteResponse, error) {
	req := c.c.NewRequest(c.name, "NoteService.DeleteNote", in)
	out := new(DeleteNoteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noteService) ChangeNoteReadStatus(ctx context.Context, in *ChangeNoteReadStatusRequest, opts ...client.CallOption) (*ChangeNoteReadStatusResponse, error) {
	req := c.c.NewRequest(c.name, "NoteService.ChangeNoteReadStatus", in)
	out := new(ChangeNoteReadStatusResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noteService) ChangeNoteArchiveStatus(ctx context.Context, in *ChangeNoteArchiveStatusRequest, opts ...client.CallOption) (*ChangeNoteArchiveStatusResponse, error) {
	req := c.c.NewRequest(c.name, "NoteService.ChangeNoteArchiveStatus", in)
	out := new(ChangeNoteArchiveStatusResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for NoteService service

type NoteServiceHandler interface {
	//
	// 根据 filter 访问投稿
	// jwt needed in metadata
	GetNotes(context.Context, *GetNotesRequest, *GetNotesResponse) error
	//
	// 创建投稿
	// jwt needed in metadata
	CreateNote(context.Context, *CreateNoteRequest, *CreateNoteResponse) error
	//
	// 更新投稿
	// jwt needed in metadata
	UpdateNote(context.Context, *UpdateNoteRequest, *UpdateNoteResponse) error
	//
	// 删除投稿
	// jwt needed in metadata
	DeleteNote(context.Context, *DeleteNoteRequest, *DeleteNoteResponse) error
	//
	// 改变投稿已读状态
	// jwt needed in metadata
	ChangeNoteReadStatus(context.Context, *ChangeNoteReadStatusRequest, *ChangeNoteReadStatusResponse) error
	//
	// 改变投稿归档状态
	// jwt needed in metadata
	ChangeNoteArchiveStatus(context.Context, *ChangeNoteArchiveStatusRequest, *ChangeNoteArchiveStatusResponse) error
}

func RegisterNoteServiceHandler(s server.Server, hdlr NoteServiceHandler, opts ...server.HandlerOption) error {
	type noteService interface {
		GetNotes(ctx context.Context, in *GetNotesRequest, out *GetNotesResponse) error
		CreateNote(ctx context.Context, in *CreateNoteRequest, out *CreateNoteResponse) error
		UpdateNote(ctx context.Context, in *UpdateNoteRequest, out *UpdateNoteResponse) error
		DeleteNote(ctx context.Context, in *DeleteNoteRequest, out *DeleteNoteResponse) error
		ChangeNoteReadStatus(ctx context.Context, in *ChangeNoteReadStatusRequest, out *ChangeNoteReadStatusResponse) error
		ChangeNoteArchiveStatus(ctx context.Context, in *ChangeNoteArchiveStatusRequest, out *ChangeNoteArchiveStatusResponse) error
	}
	type NoteService struct {
		noteService
	}
	h := &noteServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&NoteService{h}, opts...))
}

type noteServiceHandler struct {
	NoteServiceHandler
}

func (h *noteServiceHandler) GetNotes(ctx context.Context, in *GetNotesRequest, out *GetNotesResponse) error {
	return h.NoteServiceHandler.GetNotes(ctx, in, out)
}

func (h *noteServiceHandler) CreateNote(ctx context.Context, in *CreateNoteRequest, out *CreateNoteResponse) error {
	return h.NoteServiceHandler.CreateNote(ctx, in, out)
}

func (h *noteServiceHandler) UpdateNote(ctx context.Context, in *UpdateNoteRequest, out *UpdateNoteResponse) error {
	return h.NoteServiceHandler.UpdateNote(ctx, in, out)
}

func (h *noteServiceHandler) DeleteNote(ctx context.Context, in *DeleteNoteRequest, out *DeleteNoteResponse) error {
	return h.NoteServiceHandler.DeleteNote(ctx, in, out)
}

func (h *noteServiceHandler) ChangeNoteReadStatus(ctx context.Context, in *ChangeNoteReadStatusRequest, out *ChangeNoteReadStatusResponse) error {
	return h.NoteServiceHandler.ChangeNoteReadStatus(ctx, in, out)
}

func (h *noteServiceHandler) ChangeNoteArchiveStatus(ctx context.Context, in *ChangeNoteArchiveStatusRequest, out *ChangeNoteArchiveStatusResponse) error {
	return h.NoteServiceHandler.ChangeNoteArchiveStatus(ctx, in, out)
}
